------------------------------------------Trigger-----------------------------------------------------
trigger BookingTrigger on Booking__c (before insert, before Update) {
    if(Trigger.isBefore){
        if(Trigger.isInsert || Trigger.IsUpdate){
            BookingHandler.validateTheBooking(Trigger.new);
        }
    }
}
------------------------------------class------------------------------------------------------------
public class BookingHandler {
    Public Static void validateTheBooking(List<Booking__c> newBookingList){
        Map<Id, Room__c> idToRoomMap = new Map<Id, Room__c>();
        List<Room__c> roomsList = [SELECT Id, Name, Maintenance_Mode__c,Check_in_Check_Out_Time__c,Booking_Amount__c,
                                   (SELECT Id, Name,Check_In_Status__c,End_Date__c,Start_Date__c,Check_Out_Time__c, Customer__r.Name 
                                    from Bookings__r ) 
                                   from Room__c];
        idToRoomMap.putAll(roomsList);
        system.debug('map' + idToRoomMap);
        for(Booking__c booking : newBookingList){
            if(booking.Room__c == NULL){
                booking.Room__c.addError('Room Can\'t be blank');
            }
            if(idToRoomMap.get(booking.Room__c).Check_in_Check_Out_Time__c == 'Standard'){
                booking.Check_In_Time__c = Time.newInstance(11,00,00, 000);
                booking.Check_Out_Time__c = Time.newInstance(23,59,59, 000);
            }
            if(booking.Check_In_Time__c == NULL || booking.Check_Out_Time__c == NULL || 
               booking.Start_Date__c == NULL || booking.End_Date__c == NULL){
                   booking.addError('Please check all the time related fields. They can\'t be blank');
               }
            if(booking.End_Date__c < booking.Start_Date__c){
                booking.End_Date__c.addError('End date should be preceding Date of '+ booking.Start_Date__c);
            }
            //system.debug(booking.Room__c);
            if(idToRoomMap.get(booking.Room__c).Maintenance_Mode__c == True){
                booking.addError(idToRoomMap.get(booking.Room__c).Name + 
                                 '- This room is in maintenance mode. Please try for Another room.');
            }
            integer noOfBooking = idToRoomMap.get(booking.Room__c).Bookings__r.size();
            if(noOfBooking > 0){
                integer i = 0;
                for(Booking__c book : idToRoomMap.get(booking.Room__c).Bookings__r){
                    if(book.Check_In_Status__c != 'Check-out'){
                        if(idToRoomMap.get(booking.Room__c).Bookings__r[i].End_Date__c>=booking.Start_Date__c){
                            if(idToRoomMap.get(booking.Room__c).Bookings__r[i].Check_Out_Time__c > booking.Check_In_Time__c){
                                booking.addError('This room is already booked till date ' 
                                                 +idToRoomMap.get(booking.Room__c).Bookings__r[i].End_Date__c 
                                                 + 'and Time '+idToRoomMap.get(booking.Room__c).Bookings__r[i].Check_Out_Time__c
                                                + ' for booking No.'+idToRoomMap.get(booking.Room__c).Bookings__r[i].Name);
                                i++;
                            }
                        }   
                    }
                }
            }
            if(booking.Check_In_Status__c == NULL){
                booking.Check_In_Status__c.addError('Please select the status');
            }
            else{
                if(booking.Check_In_Status__c == 'Check-Out' && 
                   booking.Amount_Paid__c != idToRoomMap.get(booking.Room__c).Booking_Amount__c){
                   Decimal dueAmount = idToRoomMap.get(booking.Room__c).Booking_Amount__c - booking.Amount_Paid__c ;  
                   booking.Amount_Paid__c.addError('Please pay the due amount--' +dueAmount); 
                }
            }
        }   
    } 
}


